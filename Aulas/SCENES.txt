import kaboom from "kaboom"
// Start game
kaboom()

// Load assets
loadSprite("bean", "/sprites/bean.png")
loadSprite("coin", "/sprites/coin.png")
loadSprite("spike", "/sprites/spike.png")
loadSprite("grass", "/sprites/grass.png")
loadSprite("ghosty", "/sprites/ghosty.png")
loadSprite("portal", "/sprites/portal.png")
loadSound("bell", "/sounds/bell.mp3")
loadSound("cano", "/sounds/cano.mp3")
loadSound("up", "/sounds/levelup.mp3")


setGravity(2400)

const SPEED = 480

// 1 - Criando as fases
const LEVELS = [
	[
		"@  ^ $$ >",
		"=========",
	],
	[
		"@   $   >",
		"=   =   =",
	],
]

// Define a scene called "game". The callback will be run when we go() to the scene
// Scenes can accept argument from go()
scene("game", ({ levelIdx, score }) => {

	// Use the level passed, or first level
	const level = addLevel(LEVELS[levelIdx || 0], {
		tileWidth: 64,
		tileHeight: 64,
		pos: vec2(100, 200),
		tiles: {
			"@": () => [
				sprite("bean"),
				area(),
				body(),
				anchor("bot"),
				"player",
			],
			"=": () => [
				sprite("grass"),
				area(),
				body({ isStatic: true }),
				anchor("bot"),
			],
			"$": () => [
				sprite("coin"),
				area(),
				anchor("bot"),
				"coin",
			],
			"^": () => [
				sprite("spike"),
				area(),
				anchor("bot"),
				"danger",
			],
			">": () => [
				sprite("portal"),
				area(),
				anchor("bot"),
				"portal",
			],
		},
	})
	
	// 3:1 - Criando o personagem tirado do level
	const player = level.get("player")[0]

	// 3:2 fazendo o personagem pular
	onKeyPress("space", () => {
		if (player.isGrounded()) {
			player.jump()
		}
	})

	// 4 - Criando as direções do personagem
	onKeyDown("left", () => {
		player.move(-SPEED, 0)
	})

	onKeyDown("right", () => {
		player.move(SPEED, 0)
	})

	// 5:1 Criando as colisoes
	player.onCollide("danger", () => {
		player.pos = level.tile2Pos(0, 0)
		// Indo para a cena lose
		go("lose")
	})

	player.onCollide("coin", (coin) => {
		destroy(coin)
		play("bell")
		// Atualizando a pontuação
		score++
		scoreLabel.text = score
	})

	// 5:2 Quando o personagem sair do level
	player.onUpdate(() => {
		if (player.pos.y >= 480) {
			go("lose")
		}
	})

	// 5:3 Quando encostar no portal
	player.onCollide("portal", () => {
		play("cano")
		if (levelIdx < LEVELS.length - 1) {
			// If there's a next level, go() to the same scene but load the next level
			go("game", {
				levelIdx: levelIdx + 1,
				score: score,
			})
		} else {
			// Otherwise we have reached the end of game, go to "win" scene!
			go("win", { score: score })
		}
	})

	// 6 - Atualizando a pontuação
	const scoreLabel = add([
		text(score),
		pos(12),
	])

	// 7 -  Quando chegar na tela de fim de jogo
	scene("lose", () => {

		add([
			text("You Lose"),
			pos(12),
		])
	
		// Press any key to go back
		onKeyPress(start)
	
	})
	
	//7:1 -  Quando chegar na tela de vencedor
	scene("win", ({ score }) => {
	  play("up")
		add([
			text(`You grabbed ${score} coins!!!`, {
				width: width(),
			}),
			pos(12),
		])
	
		onKeyPress(start)
	
	})
	

})

// 2:1 - Função que vai começar o jogo
function start() {
	// Start with the "game" scene, with initial parameters
	go("game", {
		levelIdx: 0,
		score: 0,
	})
}

// 2:2 Chamando a primeira fase
start()
